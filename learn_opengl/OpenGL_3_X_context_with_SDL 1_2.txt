from: --> https://moddb.fandom.com/wiki/OpenGL:Tutorials:OpenGL_3.X_context_with_SDL_1.2

By default SDL 1.2 will create backwards-compatible OpenGL contexts, 
and not forward-compatible contexts. 
This tutorial will show how to create forward-compatible OpenGL 3.X context with SDL 1.2.

== The Old Way ==

Here's how you'd create a backwards-compatible OpenGL context the Old Way 
(from [http://www.libsdl.org/cgi/docwiki.cgi/OpenGL_Full_Example]):

 void setup_sdl() 
 {
    const SDL_VideoInfo* video;
 
    if ( SDL_Init(SDL_INIT_VIDEO) < 0 ) {
        fprintf(stderr, "Couldn't initialize SDL: %s\n", SDL_GetError());
        exit(1);
    }
 
    /* Quit SDL properly on exit */
    atexit(SDL_Quit);
 
    /* Get the current video information */
    video = SDL_GetVideoInfo( );
    if( video == NULL ) {
        fprintf(stderr, "Couldn't get video information: %s\n", SDL_GetError());
        exit(1);
    }
 
    /* Set the minimum requirements for the OpenGL window */
    SDL_GL_SetAttribute( SDL_GL_RED_SIZE, 5 );
    SDL_GL_SetAttribute( SDL_GL_GREEN_SIZE, 5 );
    SDL_GL_SetAttribute( SDL_GL_BLUE_SIZE, 5 );
    SDL_GL_SetAttribute( SDL_GL_DEPTH_SIZE, 16 );
    SDL_GL_SetAttribute( SDL_GL_DOUBLEBUFFER, 1 );
 
    /* Note the SDL_DOUBLEBUF flag is not required to enable double 
    * buffering when setting an OpenGL video mode. 
    * Double buffering is enabled or disabled using the 
    * SDL_GL_DOUBLEBUFFER attribute.
    */
    if( SDL_SetVideoMode( WIDTH, HEIGHT, video->vfmt->BitsPerPixel, SDL_OPENGL ) == 0 ) {
        fprintf(stderr, "Couldn't set video mode: %s\n", SDL_GetError());
        exit(1);
    }
 }

== The New Way ==

Fortunately, The Old Way actually gets us pretty close to an OpenGL 3.X context. 
We can use this old context to load the extension we need to create the OpenGL 3.X context.

Unfortunately, the extension isn't an OpenGL extension, but rather a WGL/XGL/etc extension, 
so the exact details of creating an OpenGL 3.X context are platform specific at this point.

=== The New Windows Way ===

Here are the steps for creating a OpenGL 3.X context on Windows:

1# Get a handle to the window
2# Load the wglCreateContextAttribsARB extension
3# Call wglCreateContextAttribsARB() with details about the context we want to create
4# Make the new context the current context
5# Delete the old context

Here's how you get the window handle from SDL:

 SDL_SysWMinfo wmInfo;
 SDL_GetWMInfo(&wmInfo)
 HDC hdc = GetDC(wmInfo.window);

Now we have the handle to the window. Next let's load that extension:

 PFNWGLCREATECONTEXTATTRIBSARBPROC wglCreateContextAttribsARB =
    (PFNWGLCREATECONTEXTATTRIBSARBPROC)wglGetProcAddress("wglCreateContextAttribsARB");

Now we can create the context. To do that we need to fill an array of integers with the details 
about the new context. For this example we'll create a forward compatible 3.0 context, 
so the array will look like this:

 int attribList[7] =
 {
    WGL_CONTEXT_MAJOR_VERSION_ARB, 3,
    WGL_CONTEXT_MINOR_VERSION_ARB, 0,
    WGL_CONTEXT_FLAGS_ARB, WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB,
    0
 };

To create an OpenGL 3.1 or 3.2 context you'd just change that number immediately 
following WGL_CONTEXT_MINOR_VERSION_ARB.

Once the paramters are set up we're ready to call wglCreateContextAttribsARB() 
and set it to the current context:

 HGLRC context = wglCreateContextAttribsARB(hdc, 0, attribList);
 wglMakeCurrent(hdc, m_glContext);

Of course, that old context SDL created is still hanging around, so we need to delete it:

 wglDeleteContext(wmInfo.hglrc);

